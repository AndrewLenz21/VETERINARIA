USE freedb_VeterinariaAPP;
-- Define usuario master con cuenta admin con todas las funciones
CREATE TABLE TIPO_USUARIO(
    COD_TIPO_USUARIO INT AUTO_INCREMENT PRIMARY KEY,
    DESCRIPCION_TIPO_USUARIO VARCHAR(100),
    FECHA_INSERCION DATETIME DEFAULT CURRENT_TIMESTAMP, -- fecha por default
    UTENTE_INSERCION VARCHAR(8)
);
-- UTENTE INSERCION ES 71248074 (DNI YENIFER)
SELECT * FROM TIPO_USUARIO;
INSERT INTO TIPO_USUARIO (DESCRIPCION_TIPO_USUARIO, UTENTE_INSERCION)
VALUES
    ('Admin', '71248074'),
    ('Veterinario', '71248074'),
    ('Secretario', '71248074')
;
-- Creacion de la tabla de usuarios
USE freedb_VeterinariaAPP;
-- Define usuario master con cuenta admin con todas las funciones
CREATE TABLE USUARIOS(
    ID_USUARIO INT AUTO_INCREMENT PRIMARY KEY,
    IDENTIFICADOR VARCHAR(8),
    NOMBRES VARCHAR(200),
    APELLIDOS VARCHAR(200),
    COD_TIPO_USUARIO INT,
    FECHA_INSERCION DATETIME DEFAULT CURRENT_TIMESTAMP, -- fecha por default
    UTENTE_INSERCION VARCHAR(8)
);

SELECT * FROM USUARIOS U
LEFT JOIN TIPO_USUARIO TIP ON TIP.COD_TIPO_USUARIO = U.COD_TIPO_USUARIO;
SELECT * FROM USUARIO_CREDENCIALES;

INSERT INTO USUARIOS (IDENTIFICADOR, NOMBRES, APELLIDOS, COD_TIPO_USUARIO, UTENTE_INSERCION)
VALUES
    ('71248074','Yenifer', 'Escobar',1, '71248074')
;


USE freedb_VeterinariaAPP;
-- Define usuario master con cuenta admin con todas las funciones
CREATE TABLE USUARIO_CREDENCIALES(
    ID_CREDENCIALES INT AUTO_INCREMENT PRIMARY KEY,
    ID_USUARIO INT,
    EMAIL VARCHAR(200),
    PASSWORD VARCHAR(200),
    FECHA_INSERCION DATETIME DEFAULT CURRENT_TIMESTAMP, -- fecha por default
    UTENTE_INSERCION VARCHAR(8)
);
SELECT * FROM USUARIO_CREDENCIALES;

INSERT INTO USUARIO_CREDENCIALES (ID_USUARIO, EMAIL, PASSWORD, UTENTE_INSERCION)
VALUES
    (1,'yenifer_admin@master.com', 'adminpassword', '71248074')
;

-- Credenciales procedure 
DELIMITER //
CREATE PROCEDURE sp_obtener_credenciales(IN _email VARCHAR(200))
BEGIN
    SELECT 
        U.ID_USUARIO AS id,
        U.NOMBRES AS nombres,
        U.APELLIDOS AS apellidos,
        AUTH.EMAIL AS email,
        AUTH.PASSWORD AS password
    FROM USUARIOS U
    LEFT JOIN USUARIO_CREDENCIALES AUTH ON U.ID_USUARIO = AUTH.ID_USUARIO
    WHERE (_email IS NULL OR AUTH.EMAIL = CONCAT(_email));
END //
-- DROP PROCEDURE IF EXISTS sp_autenticador;
CALL sp_autenticador('yenifer_admin@master.com')

-- Autenticador procedure 
DELIMITER //
CREATE PROCEDURE sp_obtener_autenticador(IN _id INT)
BEGIN
    SELECT 
        U.ID_USUARIO AS id,
        U.IDENTIFICADOR AS autenticador,
        U.COD_TIPO_USUARIO AS cod_tipo_usuario,
        TIP.DESCRIPCION_TIPO_USUARIO AS desc_tipo_usuario
    FROM USUARIOS U
    LEFT JOIN TIPO_USUARIO TIP ON TIP.COD_TIPO_USUARIO = U.COD_TIPO_USUARIO
    WHERE (_id IS NULL OR U.ID_USUARIO = _id);
END //
